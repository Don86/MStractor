# Metabolomics South Australia
# MStractor- A molecular feature extractor for mass spectrometry data

# Workflow for non targetd data processing of GCMS data.
#######################################################
#                                                     #
#              *           |                  |       #
#           *              |         |        |       #
#         *  _____         |      |  |        |       #
#        |  /    |         |      |  |    |   |       #
#      __|_/_____|         || |  || ||  | |   ||      #
#     |___    /   \..... =========================    #
#    ]=/  \__|     |         / \           / \        #
#      \__/   \___/          \_/           \_/        #
#.||.|.....||*.....|.|||..:|....*.||:.|||.|*:.|||.||..#
#                                                     #
#######################################################

# Author: Jeremy Hack
# Updates: Luca Nicolotti
# Intro -------------------------------------------------------------------

# This R-script is suitable for non-targeted profiling experiments.
# Molecular features are extracted from MS data files, retention time aligned,
# grouped and filtered to generate a data matrix ready for downstream
# statistical analysis.

# It is recommended to create a project directory ("./MyProject" or whatever
# you'd like to call the project) and copy this script there.

# MS data files must be in CDF file format:

# Export proprietary formats directly from vendor software or use ProteoWizard
# http://proteowizard.sourceforge.net/index.shtml

# To automatically determine sample classes, group files in folders according to
# their class e.g. "./MyProject/MSfiles/Control", "./MyProject/MSfiles/Treated".

# Outputs intended for downstream analysis are stored in the working directory
# alongside this script. A subdirectory "QC" is created for various quality
# control outputs which are generally only required for troubleshooting and
# development. If "FastMode" is enabled some of these outputs won't be generated
# but the final (BP) matrix will be the same.

# The first time a user runs this script software dependencies are installed
# which will take some minutes.

# The main sections of the script are listed below. It is intended that user
# input is generally only required in the "Project Settings" and
# "Instrument Parameters" sections.
#
# "Project Settings" - Project specific input
# "Acquisition Parameters" - Parameters relating to the acquisition conditions
# "Prepare Environment" - Installed required software etc
# "Create dataset" - Extract data from MS files
# "RT Alignment" - Aligns the extracted molecular features
# "Reconstruct Spectra" - Construct deconvoluted spectra
# "Export Matrix" - Filter peaks and export basepeak matrix

# To clean things up and start afresh you may wish to:
# Clear the console pane. Objects in the environment pane unaffected.
cat("\014")

# Clear the environment pane (the objects). Console pane unaffected.
rm(list = ls(all.names = TRUE))

# Invoke garbage collection to reclaim RAM
gc()


# "Project Settings" - Project specific input -----------------------------

# Prior to running this script create a project directory and specify it's
# location. If the project directory is named "MStractorDemo" the MS files will
# be loaded automatically. Otherwise, place MS files in a sub-directory named
# "MSfiles" and group files according to their class into sub-directories of
# MSfiles.
# e.g.
# D:/MyProject
#       |--MSfiles
#       |     |--Control
#       |     |     |--MSfileC1.mzXML
#       |     |     |--MSfileC2.mzXML
#       |     |--Treatment
#       |     |     |--MSfileT1.mzXML
#       |     |     |--MSfileT2.mzXML
#       |-Demo.R (this script)

# Specify the path to the project folder. If left as "" a folder named
# "MStractorDemo" will be created in the user's home directory.
# e.g.  "C:/users/%UserName% on Windows
#       "/home/$HOME" on Linux

pathToProject <- "C:/your path to the MStractor folder"

setwd(pathToProject)
getwd()
list.dirs()
list.files()

# Specify a "typical" MS file which can be considered a reference. Leave blank
# for MStractorDemo.

ref <- "./MSfiles/pooled/pooled.CDF"


#QCdataAll <- TRUE # IF TRUE, EICs for every molecular feature will be plotted
CPUs <- 1    
updatePackages <- "FALSE" 

# "Acquisition Parameters" - Parameters relating to the acquisition -------

# Chromatography parameters
rtStart <- 1  
rtEnd <- "max"  
FWHM_min <- 1.74  
FWHM_max <- 6.8  
rtDelta <- 664-661  


# MS parameters
mzPol <- "positive"# Set to "positive" or "negative" ion mode
mzStart <- 30  # Start of m/z region of interest
mzEnd <- 350  # End of m/z region of interest

mzErrAbs <- 0.2# Max m/z delta expected for the same feature across all samples
mzZmax <- 1     # Max charge state expected
EICsMax <- 50   # Max number of chrom. peaks expected for a single EIC
sens <- 1      # Factor (between 0 and 1) for peak extraction sensitivity
# Impacts peak picking thresholds, RAM & CPU utilisation.
# Start with ~0.5.
fileType <- "CDF" # MS data file type e.g. "mzData", "mzML", "mzXML", "CDF"



install.packages('RANN')
install.packages('snow')
install.packages('fda')
install.packages('pander')
install.packages('plyr')
install.packages("dplyr")
install.packages("ggpubr")
install.packages('gtools')
install.packages('sm')
install.packages('plotly', dependencies= TRUE)
install.packages('htmltools', dependencies= TRUE)
install.packages('tidyr', dependencies= TRUE)
install.packages('MSeasy', dependencies= TRUE)
install.packages("berryFunctions")
install.packages("magrittr")
install.packages("missForest")



if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("xcms", version = "3.8")
BiocManager::install("CAMERA", version = "3.8")
BiocManager::install("modeest", version = "3.8")



library(xcms)
library(RANN)
library(snow)
library(modeest)
library(CAMERA)
library(tools)
library(parallel)
library(pander)
library(magrittr)
library(scales)
library(plyr)
library(dplyr)
library(ggpubr)
library(sm)
library(gtools)
library(plotly)
library(htmltools)
library(tidyr)
library(MSeasy)
library(berryFunctions)
library(fda)
library("missForest")

####

# "Create dataset" - Extract data from MS files ---------------------------

# Record the time so that the total processing time can be determined later.
runtimeStart<- Sys.time()
runtimeStart

if (CPUs == "max"){
  CPUs <- detectCores(all.tests= TRUE, logical= TRUE)
}


# Load all the MS files
if (basename(pathToProject) == "MStractorDemo"){
  datapath <- file.path(find.package("faahKO"), "cdf")
  rawfiles <- dir(datapath, full.names=TRUE, pattern="\\.CDF", recursive=TRUE)
  ref <- paste(datapath,"/WT/wt19.CDF", sep= "")
} else if (fileType == "CDF"){
  datapath <- paste(pathToProject,"MSfiles" , sep="/")
  rawfiles <- dir(datapath, full.names=TRUE,
                  pattern="\\.CDF", recursive=TRUE)
} else if (fileType == "mzData"){
  datapath <- paste(pathToProject,"MSfiles" , sep="/")
  rawfiles <- dir(datapath, full.names=TRUE,
                  pattern="\\.mzData", recursive=TRUE)
} else if (fileType == "mzML"){
  datapath <- paste(pathToProject,"MSfiles" , sep="/")
  rawfiles <- dir(datapath, full.names=TRUE,
                  pattern="\\.mzML", recursive=TRUE)
} else if (fileType == "mzXML"){
  datapath <- paste(pathToProject,"MSfiles" , sep="/")
  rawfiles <- dir(datapath, full.names=TRUE,
                  pattern="\\.mzXML", recursive=TRUE)
} else (cat("No raw files found!\n\nSupported filetypes include:
            \n CDF \n mzData \n mzML \n mzXML", fill= FALSE)
)

cat("The following MS files have been loaded:\n", rawfiles, fill= TRUE, sep="")

#Define file name
#it is important that the first part of the file name is matching the folder name within the MSfiles folder
#and then define the replicates with R1 and R2, e.g.: "MSfiles/Fig_Post/Fig_Post_R1_2f4_01_19899.mzXML"


files<-basename(list.files(path="./MSfiles", recursive = TRUE, full.names=FALSE))
sn<-list()


for (i in 1:length(files)){
 divide<-strsplit(files[i],".CDF")
 sn[[i]]<-divide
 }

Files<-unlist(sn)



# Load a reference file & define the scan range
# Set mz step size for seeking new EIC traces
profmethod <- "bin"
profStep <- mzErrAbs*4
refRaw <- xcmsRaw(ref, profstep= profStep, profmethod="bin", includeMSn= FALSE, mslevel= NULL,
                  scanrange= NULL)
refRaw
# Plot TIC of reference sample to file
dir.create("./QC")
graphics.off()
png("./QC/Ref_TIC.png", width = 1024, height = 768, units = "px")
plotTIC(refRaw, ident= FALSE, msident= FALSE)
dev.off()

# Determine scan range
scanStart <- head(which(refRaw@scantime > rtStart & refRaw@scantime < rtEnd),
                  n= 1)

if (identical(rtEnd, "max")) {
  scanEnd <- max(refRaw@scanindex)
  rtEnd <- refRaw@scantime[which(refRaw@scanindex == scanEnd)]
} else {
  scanEnd <- tail(which(refRaw@scantime > rtStart & refRaw@scantime < rtEnd),
                  n= 1)
}

# Set peak picking parameters

cladir<-dirs('./MSfiles//', full.names=FALSE)

dlf<-vector()
for (i in 1:length(cladir)){
detfls<-length(list.files(path =(paste(pathToProject,'/MSfiles/',cladir[i], sep=''))))
dlf<-c(dlf,detfls)
}

samplegroup<-vector()
for (i in 1:length(dlf)){
sg<-rep(cladir[i],dlf[i])
samplegroup<-c(samplegroup,sg)
}

cols <- rainbow(length(cladir))
ClassCol<-vector()
for (i in 1:length(dlf)){
sc<-rep(cols[i],dlf[i])
ClassCol<-c(ClassCol,sc)
}




FWHM_min <- 1.74 
FWHM_max <- 6.8 
fwhm= 3  #  both fwhm and sigma can be increased up to 4.3 (tested) depending on the peak peakwidth of the considered chromatogram. If you change them, check that the integration window in the QC/Ref_EICs_100 file is still acceptable.
sigma= 3 #  
mzdiff <- mzErrAbs/5
intThresh <- as.integer(quantile(refRaw@env$intensity,1-sens)*5)  
snThresh <- 20/sens  # lower s/n threshold and integration threshold to avoid zero entries when the signal is actually there

fitGauss <- FALSE
sleep <- 0
step=0.8 # profstep

# Plot picked peaks to file

#png(file.path("./QC/Pks/%003d.png"), h=768, w=1024)            
refPks <- findPeaks.matchedFilter(refRaw, fwhm= fwhm,
                    sigma= sigma , snthresh=snThresh,
                    max=40, step=0.8, mzdiff= mzdiff, sleep= 0)


#Pks <- refPks[,c("rt","mz","maxo","maxf", "into","intf","i","sn")]   #
#write.table(Pks, file= "./Pks.tsv", sep="\t")          # raw peakpicking

png("./QC/Ref_EICs_100.png", width = 2048, height = 1536, units = "px")
plotPeaks(refRaw, refPks,  c(20,20), width = fwhm*5)
dev.off()    

# Create xcms data set
# Using matchedFilter
# downstream methods such as getEIC will use the step paramter



xset <- xcmsSet(rawfiles, profmethod= "bin", profparam= list(step= profStep),
                method='matchedFilter', fwhm= fwhm, sigma=sigma, max=40, step=0.8, mzdiff= mzdiff, sleep= 0, snthresh= snThresh) # nslaves argument removed because deprecated

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

xset # To checkout slots use slotNames(xset); ls(xset@groups)

slotNames(xset) # to check out the slots of xset
write.table(xset@peaks, file="./peaksxset.tsv", sep="\t") # print the required info of xcmsSet
write.table(xset@filled, file="./filledxset.tsv", sep="\t") #must be empty ath this stage


# Determine the lowest level of replication within a class? ---------------
classes <- list.dirs(datapath, full.names= FALSE, recursive= FALSE)
classSize <- vector(length= length(classes))
dirs <- list.dirs(datapath, full.names= TRUE, recursive= FALSE)
lst <- vector("list", length(dirs))
names(lst) <- dirs
for (i in 1:length(dirs)){
  classSize[i] <- length(dir(dirs[i]))
}
minClassSize <- min(classSize)
#medClassSize <- median(classSize)
#aveClassSize <- ave(classSize)
#modeClassSize <- mfv(classSize)

bw <- fwhm
mzWid <- mzErrAbs
minsamp <- ceiling(minClassSize)-1

# group-methods {xcms}
# A peak group is considered valid when it contains either, the minimum number
# of samples set by minSamp, OR at least one sample class satisfies minFrac.

xset <- group(
   xset, method= "density", bw= 3, minfrac= 0.3, minsamp= minsamp,
   mzwid= mzWid, max= EICsMax, sleep= 0)

# write.table(xset@peaks, file="./xsetaftergrouping.tsv", sep="\t")



# Function: TICsOverlaid --------------------------------------------------

getTIC <- function(file,rtcor=NULL) {
  object <- xcmsRaw(file)
  cbind(if (is.null(rtcor)) object@scantime else rtcor,
        rawEIC(object,mzrange=range(object@env$mz))$intensity)
}

# Overlay TIC from all files in current folder or from xcmsSet, create PNG

getTICs <- function(xcmsSet=NULL,files=NULL, pngName="TICs.png",
                    rt=c("raw","corrected")) {
  if (is.null(xcmsSet)) {
    filepattern <- c("[Cc][Dd][Ff]", "[Nn][Cc]", "([Mm][Zz])?[Xx][Mm][Ll]",
                     "[Mm][Zz][Dd][Aa][Tt][Aa]", "[Mm][Zz][Mm][Ll]")
    filepattern <- paste(paste("\\.", filepattern, "$", sep = ""),
                         collapse = "|")
    if (is.null(files))
      files <- getwd()
    info <- file.info(files)
    listed <- list.files(files[info$isdir], pattern = filepattern,
                         recursive = TRUE, full.names = TRUE)
    files <- c(files[!info$isdir], listed)
  }
  else {
    files <- filepaths(xcmsSet)
  }

  N <- length(files)
  TIC <- vector("list",N)

  for (i in 1:N) {
    cat(files[i],"\n")
    if (!is.null(xcmsSet) && rt == "corrected")
      rtcor <- xcmsSet@rt$corrected[[i]] else
        rtcor <- NULL
    TIC[[i]] <- getTIC(files[i],rtcor=rtcor)
  }

  png(pngName,h=768, w=1024)
  #cols <- rainbow(N)
  cols <- as.integer(sampclass(xcmsSet)) + 1
  lty = 1:N
  pch = 1:N
  xlim = range(sapply(TIC, function(x) range(x[,1])))
  ylim = range(sapply(TIC, function(x) range(x[,2])))
  plot(0, 0, type="n", xlim = xlim, ylim = ylim,
       main = "Total Ion Chromatograms", xlab = "Retention Time (s)",
       ylab = "TIC")
  for (i in 1:N) {
    tic <- TIC[[i]]
    points(tic[,1], tic[,2], col = cols[i], pch = pch[i], type="l")
  }
  legend("topright",paste(basename(files)), col = cols, lty = lty, pch = pch)
  dev.off()

  invisible(TIC)
}
# End Function: TICsOverlaid

# QC Plots ----------------------------------------------------------------
# Plot TICs as PNG
getTICs(xcmsSet= xset, pngName= "./QC/TICs_Raw.png", rt= "raw")

# if (QCdataAll == TRUE ){
#   QCplots <- c("mzdevhist", "rtdevhist", "mzdevmass", "mzdevtime",
#                "mzdevsample", "rtdevsample")
#
#   for (i in QCplots){
#     png(filename= paste("./QC/","QCplot_","align0_", i, ".png", sep= ""),
#         w=1280, h=1024)
#     plotQC(xset, what= i)
#     dev.off()
#   }

# Get EICs
xset_grps <- xset@groups
# optional  write.table(xset@groups,file= "./QC/xsgroup.tsv", sep= "\t")
eicRange <- 5*(fwhm)
eicsRaw <- getEIC(xset, mzrange=xset_grps, rtrange= eicRange ,
                  groupidx = 1:nrow(xset_grps), rt= "raw")

# Plot as individual PNGs
dir.create("./QC/EICs_Raw/")
do.call(file.remove,list(list.files("./QC/EICs_Raw", full.names= TRUE)))
graphics.off()
png(file.path("./QC/EICs_Raw/%003d.png"), h=768, w=1024)
plot(eicsRaw, xset)
dev.off()

# Export matrix prior to RT Alignment -------------------------------------
xsTable <- peakTable(xset, filebase= "./QC/xsTable", method= "medret",
                     value= "maxo")

write.table(xsTable[with(xsTable, order(rt, mz)), ],
            file= "./QC/xsTable.tsv", sep= "\t", quote= FALSE, col.names= NA)

#RET TIME ALIGNMENT
align_ref <- match(basename(ref),basename(rawfiles[]))

png(filename= "./QC/rtAlign.png", w=1280, h=1024)
xsAlign <- retcor(xset, method= "loess", missing= 3, extra= 0, span= 0.3,
                  family= "gaussian", plottype= "deviation")
dev.off()
xsAlign

xsAlign <- group(
  xsAlign, method= "density", bw= 3, minfrac= 0.3, minsamp= minsamp,
  mzwid= mzWid, max= EICsMax, sleep= 0)
xsAlign




# Plot TICs
getTICs(xcmsSet= xsAlign, pngName= "./QC/TICs_Aligned.png", rt="corrected")


# Retrieve missing data
xsFilled <- fillPeaks(xset, method="chrom")

#write.table(xsFilled@peaks, file="./xspeaksafterfilling.tsv", sep="\t")  # optional print data matrix after peak filling 
#write.table(xsFilled@filled, file="./xspeaksthatwerefilled.tsv", sep="\t")   # at this stage must not be empty



# Plot EICs ---------------------------------------------------------------
xsFilledGrps <- xsFilled@groups
eicsFilled <- getEIC(xsFilled, mzrange= xsFilledGrps, rtrange= FWHM_max*5,
                     groupidx= 1:nrow(xsFilledGrps), rt= "corrected")

dir.create("./QC/EICs_Aligned/")
do.call(file.remove,list(list.files("./QC/EICs_Aligned", full.names= TRUE)))
graphics.off()
png(file.path("./QC/EICs_Aligned/%003d.png"), h=768, w=1024)

plot(eicsFilled, xsFilled)
dev.off()               #at this stage I can see if the integration was good enough . 

# "Reconstruct Spectra" - Construct deconvoluted spectra ------------------

mzabs <- mzErrAbs
minfrac <- minClassSize/length(rawfiles)
xs <- xsFilled # Choose an xcmxSet object

# Using CAMERA:
xs_an <- xsAnnotate(xs, polarity= 'positive', nSlaves= 1) # nSlaves>1 is broken
xs_an <- groupFWHM(xs_an, sigma= 3, perfwhm= 1, intval= "maxo")

#write.table(xs_an@groupInfo, file="./grinfo_afterfwhm.tsv", sep="\t") #optional, it saves group Info after grouping  


xs_an <- findIsotopes(xs_an, maxcharge=1, maxiso=4, 
                      mzabs= mzabs, intval="maxo", minfrac=minfrac,
                      filter= TRUE)  
					  
xs_an <- groupCorr(xs_an, cor_eic_th= 0.7, pval=0.1,
                   graphMethod="hcs", calcIso= TRUE, calcCiS = TRUE,
                   calcCaS= TRUE, cor_exp_th= 0.7)
				   
#write.table(xs_an@groupInfo, file="./grinfo_cameragroupcorr.tsv", sep="\t") optional
				   
# Not appropriate for EI spectra
#xs_an <- findAdducts(xs_an, ppm= ppm, mzabs= mzabs, multiplier= 3,
#                     polarity= mzPol)

PksAn <- getPeaklist(xs_an, intval="maxo")

#PksAn <- PksAn[order(as.numeric(PksAn$rt)),]

write.table(PksAn, file=paste("./QC/Pks_An", "tsv", sep="."), sep= "\t",
            col.names= NA, row.names= TRUE)

# "Export Matrix" - Filter peaks and export basepeak matrix ---------------

# 1. Filter lone groups.
# Count number of entities for each factor
pcgroups <- table(PksAn$pcgroup)  # PksAn$pcgroup Is the pcgrup vector 
min_ions <- 1
PksAnFilt <- droplevels(PksAn[PksAn$pcgroup %in% names(pcgroups)
                              [pcgroups >= min_ions],,drop=FALSE])

							  
# 2. Optionally, select signals that are part of an isotope group
#PksAnFilt <- PksAnFilt[PksAnFilt$isotopes != "", ]
#PksAnFilt <- PksAn[PksAn$isotopes != "", ]

# 3. Determine median signal intensity
sNames <- sampnames(xs)
RespMed <- apply(PksAnFilt[c(sNames)], 1, median, na.rm= TRUE)
PksAnFilt <-cbind(PksAnFilt, RespMed)

# 4. Keep only the most intense signal from each pcgroup
# Other values may be preferred
#RespMed <- PksAnFilt$RespMed
# May be required if factors aren't recognised
# PeakList$pcgroup <- as.factor(PeakList$pcgroup)

BasePks <- PksAnFilt[ RespMed == ave(RespMed, PksAnFilt$pcgroup,
                                     FUN= function(RespMed) (RespMed))
                      , ] 
				  

# BasePks[order(as.numeric(BasePks$pcgroup)),]

write.table(BasePks[with(BasePks, order(rt, mz)), ],
            file=paste("Pks_BPs", "tsv", sep="."), sep= "\t",
            col.names= NA, row.names= TRUE)

# Fetch basePeak EICs ---------------------------------------------------------------
BP_EICs <- paste(sprintf("%03d",as.numeric(rownames(BasePks))),"png", sep= ".")

dir.create("./EICs_BasePeaks/")
do.call(file.remove,list(list.files("./EICs_BasePeaks/", full.names= TRUE)))
for (i in 1:length(BP_EICs)){
  sourceF <- paste("./QC/EICs_Aligned/", BP_EICs[i], sep= "")
  destF <- paste("./EICs_BasePeaks/", BP_EICs[i], sep= "")
  file.copy(from= sourceF, to= destF, overwrite= FALSE)
}

dir.create("./EICs_BasePeaks_Curated/")
do.call(file.remove,list(list.files("./EICs_BasePeaks_Curated/",
                                    full.names= TRUE)))
for (i in 1:length(BP_EICs)){
  sourceF <- paste("./QC/EICs_Aligned/", BP_EICs[i], sep= "")
  destF <- paste("./EICs_BasePeaks_Curated/", BP_EICs[i], sep= "")
  file.copy(from= sourceF, to= destF, overwrite= TRUE)
}

# Stop watch --------------------------------------------------------------
sessionInfo <- sessionInfo()

now <- Sys.time()
time <- unclass(as.POSIXlt(now))
timeStamp <-paste(time$year,time$mon, time$mday, time$hour, time$min, sep="_")
imageName <- paste(timeStamp, "RData", sep= ".")
save.image(imageName)
historyName <- paste(timeStamp,"RHistory", sep= ".")
savehistory(historyName)

runtimeEnd <- Sys.time()
runtime <- runtimeEnd - runtimeStart
runtime

gc()

# Peak Curation -----------------------------------------------------------
# The EIC's in ./EIC_BasePeaks should be reviewed. Create a folder named
# "./EICs_BasePeaks_Curated/" and only copy into it the .PNG files that
# demonstrate good chromatographic peak shape. Then run the following

files <- dir("./EICs_BasePeaks_Curated/")
pks <- basename(file_path_sans_ext(dir("./EICs_BasePeaks_Curated/")))
BasePksCur <- BasePks[sprintf("%03d",as.numeric(rownames(BasePks))) %in% pks,]
write.table(BasePksCur[with(BasePksCur, order(rt,mz)), ],
            file= paste("PksBPsCurated", "tsv", sep="."),
            sep= "\t", col.names= NA, row.names= TRUE)
			

##AUTOMATIC MEDIAN NORMALISATION


colnum<-ncol(BasePksCur)
BasePksCur$id <- rownames(BasePksCur)
idcolnum<-ncol(BasePksCur)

BasePksCur<-BasePksCur[c(idcolnum,1:colnum)]



BasePksCur<-BasePksCur[with(BasePksCur, order(rt,mz)), ]
BasePksCur$rt<-BasePksCur$rt/60
AIN<-BasePksCur[,c(1,2,5)]
write.table(AIN,file= paste("AIN", "tsv", sep="."),
            sep= "\t", col.names= TRUE, row.names= FALSE)

sub1<-colnames(BasePksCur)	
replicates<-which(sub1%in%Files)
BasePksCurSel<-subset(BasePksCur, select=replicates)
SimpMatrix<-merge(AIN, BasePksCurSel, by="row.names");SimpMatrix[,1]<-NULL

write.table(SimpMatrix[with(SimpMatrix, order(rt,mz)), ],
            file= paste("Simp_Curated", "tsv", sep="."),
            sep= "\t", col.names= NA, row.names= TRUE)  #### matrix with simplified inputs
			
			
Median<-apply(BasePksCurSel, 2, FUN = median, na.rm=TRUE)
norm<-sweep(BasePksCurSel, 2, Median, `/`)
NormalizedMatrix<-merge(AIN, norm, by="row.names");NormalizedMatrix[,1]<-NULL
t<-format(round(NormalizedMatrix[,2:ncol(NormalizedMatrix)], 4), nsmall = 4)
NormalizedMatrix[,2:ncol(NormalizedMatrix)]<-t	

NormalizedMatrix[,3]<-as.numeric(NormalizedMatrix[,3])
NormalizedMatrix[,2]<-as.numeric(NormalizedMatrix[,2])	

fix(NormalizedMatrix) # check all the columns but id are numeric

write.table(NormalizedMatrix[with(NormalizedMatrix, order(rt,mz)), ],
            file= paste("NormalizedMatrix", "tsv", sep="."),
            sep= "\t", col.names= NA, row.names= TRUE)  #### matrix with simplified inputs

#DESCRIPTIVE STATISTICS

#identify data classes
classes<-dir("./MSfiles/", full.names=FALSE, all.files=FALSE)

set<-rep(list(vector()), length(classes) )
for (i in 1:length(classes)){
 categories <- which(grepl(classes[i],Files))
 set[[i]]<-categories
}



options("scipen"=999) # disables scientific notation

descriptive_stats<-rep(list(matrix()), length(classes))

#####for loop responsible for running Descriptive_statistics 
for (i in 1:length(set)){
 selection <- data.matrix(subset((NormalizedMatrix), select=Files[set[[i]]]))
 stdev<-as.matrix(apply(selection, 1, sd)); colnames(stdev)<-paste('St.Dev.',classes[i])
 average<-as.matrix(apply(selection, 1, mean)); colnames(average)<-paste('Average',classes[i])  
 cv<-as.matrix((stdev/average)*100); colnames(cv)<-paste('CV%',classes[i])
 statsb<-as.matrix(cbind(selection, (cbind(average, stdev, cv))))
 class_stats<-as.matrix(format(round(statsb, 2), nsmall = 2))
 class(class_stats)<-'numeric'
 class_statsdf<-as.data.frame(class_stats)
 descriptive_stats[[i]]<-class_statsdf
 }
 ###the average stdev and rsd values are calculated with 5 decimal figures. When the descriptive statistic is printed values are reported with to 2 decimal figures

# Print descriptive statistics results

for (i in 1:length(descriptive_stats)){
  write.table(descriptive_stats[[i]], paste("./","Descriptive_Stats_func", classes[[i]], (".tsv")),sep=" \t", row.names=TRUE) 
}
